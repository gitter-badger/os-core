#!/bin/sh
#
# LINBO busybox-based initramfs bootscript
# (C) 2013 by Steffen Hoenig <s.hoenig@openthinclient.com>
#	      Joern Frenzel <j.frenzel@openthinclient.com>
# LICENSE: GPL V3

# Its purpose:
# 1. Mounting a squashfs container over nfs
# 2. Unifying this ro conainter with ramdisk and file overlay
# 3. Hand over control to "real" sysv init.

# Preconditions:
# - Kernel contains all _needed_ nfs, ethernet, aufs modules
TOP=$(pwd)

. $TOP/init_functions

export TCOS="/tcos"
export LINK="$TCOS/link"       # nfs             OTC-Server:/openthinclient # the initial one!
export WRITE="$TCOS/write"     # for aufs to write this is just a folder inside the /
export BASE="$TCOS/base"       # squashfs # via loopback sfs-file: /tcos/link/sfs/base.sfs
export PACKAGE="$TCOS/package"
export SHADOW="$TCOS/shadow"
export CUSTOM="$LINK/custom"
export TCOS_NIC=""

# Some more default variables here.
# Values can be overwritten in kernel commandline: Key=Value
#
fglrx=false
nvidia=false
figlet=true
splashImage=pales-splash-1013x760.ppm
glamor=false
via=false
localboot=false
verbose=false
debug=false

## MAIN ####################################################

export PATH=/bin:/usr/bin:/sbin:/usr/sbin

echo "Loading, please wait..."

mkdir -p /var/lock /sys /proc /tmp /run
mkdir -p -m 0755 /dev; mkdir -p -m 0700 /root

mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc  -o nodev,noexec,nosuid proc  /proc

# set debug and/or -x
grep -wq verbose /proc/cmdline && verbose=true
grep -wq debug /proc/cmdline && debug=true
grep -wq set_x /proc/cmdline && set -x

tmpfs_size="10M"
if ! mount -t devtmpfs -o size=$tmpfs_size,mode=0755 devtmpfs /dev; then
        echo "W: devtmpfs not available, falling back to tmpfs for /dev"
        mount -t tmpfs -o size=$tmpfs_size,mode=0755 tmpfs /dev
        [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1 
        [ -e /dev/null ] || mknod /dev/null c 1 3 
fi
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true
mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run
mkdir -m 0755 /run/initramfs

# mdev or detect_nic
#
#if [ -f /sbin/mdev ]; then
#    echo /sbin/mdev > /proc/sys/kernel/hotplug
#    mdev -s
#fi

# have modules.dep dynamically, it just takes a microsecond to create
depmod -a

for m in $(detect_nic) aufs nfs squashfs loop;do
    $verbose && echo "... loading module $m"
    modprobe $m
done

# create TCOS essential folders
for folder in $LINK $WRITE $BASE $PACKAGE $SHADOW $SHADOW $CUSTOM ; do mkdir -p $folder ; done

# Get Key=Value pairs from kernel commandline and overwrite defaults.
read CMDLINE < /proc/cmdline
getbootparams

# let the kernel shut up if not in debug mode
$debug || echo "0" > /proc/sys/kernel/printk

# Shut up or display figlet logo if not in quiet mode.
#

grep -vwq quiet /proc/cmdline && $figlet && (echo ${BLUE}; cat /lib/pales.figlet; echo ${NORMAL}; sleep 1)

ip addr add 127.0.0.1/8 dev lo
ip link set dev lo up

# We support up to four networkcards now.
#
for i in 0 1 2 3; do
    echo "${BLUE}DHCP Broadcasting for IP address on (${MAGENTA}eth$i${BLUE})... ${NORMAL}"
    ip link show dev eth$i &> /dev/null || (echo "Device eth$i not found." && continue)
    ip link show dev eth$i | grep -q NO-CARRIER && (echo "Device eth$i has no link." && continue)
    ip link set dev eth$i up &> /dev/null || (echo "Could not bring up device eth$i." && continue)
    if $debug; then
	udhcpc -q -n -i eth$i && TCOS_NIC="eth$i"
    else
	udhcpc -q -n -i eth$i &> /dev/null && TCOS_NIC="eth$i"
    fi
    [ -n "$TCOS_NIC" ] && break
done

[ -z "$TCOS_NIC" ] && echo "${RED}Received no DHCP-lease from network. STOPP ${NORMAL}" && debugshell

$debug && debugshell 

########################################################
# NFS or local boot?
#    - variable nfsroot is taken from cmdline and is always given
#    - variable localboot is also taken from cmdline, but is only set on localboot

if $localboot; then
    echo "${BLUE}Switching client to localboot ... ${NORMAL}"
    echo /sbin/mdev > /proc/sys/kernel/hotplug     # enable mdev
    for mod in ahci ext4 scsi_mod sd_mod sg fscache ata_generic ata_piix sata_via pata_via libata; do 
	$verbose && echo "... loading module $mod"
	modprobe $mod;
    done
    > /proc/sys/kernel/hotplug                     # disable mdev
    LINK_RESOURCE=/dev/sda2
    mount -o,ro -t ext4 "$LINK_RESOURCE" $LINK
elif [ -n "$nfsroot" ]; then
    LINK_RESOURCE=$nfsroot
    mount -t nfs -o nolock -o ro -o retrans=10 -o vers=2 "$LINK_RESOURCE" $LINK
fi

if [ $? -eq 0 ]; then
  echo "${GREEN}$LINK_RESOURCE mounted successfully on $LINK...${NORMAL}"
else
  echo "${RED}Could not mount $LINK_RESOURCE on $LINK - exiting. ${NORMAL}"
  debugshell
fi

# what's up?
#
$debug && debugshell 

###############################################################
# get the splashscreen running if some framebuffer is enabled
# 

[ -c /dev/fb0 ] || mknod /dev/fb0 c 29 0               # ensure framebuffer device exists
echo 0 > /sys/class/graphics/fbcon/cursor_blink        # prevent cursor blinking
grep -q "vga=" /proc/cmdline && fbsplash -silent -s /tcos/link/custom/splashscreens/${splashImage} 

###############################################################
# apply updates for localboot here
# 
# Keep in mind: The kernels and intrd (folder tftp) are updated 
#   within the the update script after the client has
#   successfully booted.
#   The sfs and custom folders will be applied here now.

#
# mount -o remount,rw $LINK; touch $LINK/lb_updates/.apply_updates

if [ $localboot -a -r $LINK/lb_updates/.apply_updates ]; then
    #set -x 
    mount -o remount,rw $LINK                         # mount rw
    for folder in sfs custom; do
        echo -e "${GREEN}\t.. applying updates for $folder${NORMAL}"
	rm -rf $LINK/$folder                          # remove old one
	mv $LINK/lb_updates/$folder $LINK/            # have new one in place
	cp -al $LINK/$folder $LINK/lb_updates/        # have a hardlink copy of the new one (for the next compare with rsync)
    done
    rm -f $LINK/lb_updates/.apply_updates             # reset update state
    mount -o remount,ro $LINK                         # mount read only again
    $debug && debugshell 
    # set +x
fi


########################################################
# Mount SFS files
# base.sfs
#

TREE=""

# mount base and packages sfs files
[ -f "$LINK/sfs/base.sfs" ] || (echo "${RED} could not find $LINK/sfs/base.sfs - exiting. ${NORMAL}" && exit 1)
if mount -n -t squashfs -o loop,ro "$LINK/sfs/base.sfs" $BASE 2>/dev/null; then
    echo "base.sfs mounted...${GREEN}yes${NORMAL}"
    TREE="$BASE=ro"
else
    echo "base.sfs mounted...${RED}no${NORMAL}"
fi

# other SFS
# mount module sfs and packages sfs

mountsfs package

# AUFS
#
AUFS=""
mount -t tmpfs -o mode=0755 none $WRITE # links writing branch to ram!

# TREE has a leading colon ":" ! (DEPRECATED)
# :DEBUG:

mount -t aufs -o noplink,br:${WRITE}=rw:${TREE} unionfs $SHADOW  && AUFS="true"

# enables additional packages (in  bz2, gz. tar, plain, format)
mountcustom $CUSTOM

mount --bind /sys ${SHADOW}/sys
mount --bind /dev ${SHADOW}/dev
mount --bind /dev/pts ${SHADOW}/dev/pts
mount --bind /proc ${SHADOW}/proc

# have this folders also inside the running system, just to see them for debugging.
#
mkdir -p ${SHADOW}/$LINK &>/dev/null && mount --bind $LINK ${SHADOW}/$LINK
mkdir -p ${SHADOW}/$PACKAGE &>/dev/null && mount --bind $PACKAGE ${SHADOW}/$PACKAGE
mkdir -p ${SHADOW}/$BASE &>/dev/null && mount --bind $BASE ${SHADOW}/$BASE
mkdir -p ${SHADOW}/$WRITE &>/dev/null && mount --bind $WRITE ${SHADOW}/$WRITE


###########################################################################################
# ToDo: Source the graphics card stuff out in a separate file.
#
mkdir -p ${SHADOW}/etc/X11/xorg.conf.d &> /dev/null

# Check if acceleration glamor should be used.
# This does not work with proprietary drivers at the moment, but we don't check this here.
# It's the admins decision.
#
if $glamor ; then 
    echo "${GREEN}Enabling xorg acceleration glamor.${NORMAL}"
    echo -e 'Section "Device"\n\tIdentifier "My GPU"\n\tOption "AccelMethod" "glamor"\nEndSection' > ${SHADOW}/etc/X11/xorg.conf.d/21-glamor.conf
fi

# Check if fglrx drivers for radeon cards should be used.
# Prevent using fglrx in case of non existing AMD hardware.
# 
if $fglrx && $(lspci | grep -q 1002); then
    echo "${GREEN}Switching client to use proprietary fglrx drivers.${NORMAL}"
    chroot ${SHADOW} update-alternatives --set glx /usr/lib/fglrx

    mkdir -p ${SHADOW}/etc/X11/xorg.conf.d &> /dev/null

    # write xorg.conf  snippet
    echo -e 'Section "Device"\n\tIdentifier "My GPU"\n\tDriver "fglrx"\nEndSection' > ${SHADOW}/etc/X11/xorg.conf.d/20-fglrx.conf
    chroot ${SHADOW} modprobe fglrx
else
    echo "blacklist fglrx" >> ${SHADOW}/etc/modprobe.d/tcos-blacklist.conf
fi


# Check if nvidia driver for nvidia cards should be used.
# Prevent using nvidia in case of non existing Nvidia hardware.
#

if [ -n "$nvidia" ] && $(lspci | grep -q -i 10DE); then
    echo -n "${BLUE}Switching client to use proprietary nvidia driver version: ${NORMAL}"
    # write xorg.conf  snippet
    echo -e 'Section "Device"\n\tIdentifier "My GPU"\n\tDriver "nvidia"\nEndSection' > ${SHADOW}/etc/X11/xorg.conf.d/20-nvidia.conf
    case "$nvidia" in
	"true"|"auto") # try to autodetect for users who don't know exactly
	    if $(lspci | grep -q -i 10de:032a); then # nvidia nvs280 found?
		echo -n "${BLUE} 173.xx ${NORMAL}"
		echo -e '/usr/lib/i386-linux-gnu/nvidia/legacy-173xx/\n' > ${SHADOW}/etc/ld.so.conf.d/legacy-173xx.conf
		chroot ${SHADOW} ldconfig
		chroot ${SHADOW} /usr/sbin/update-alternatives --set nvidia /usr/lib/nvidia/legacy-173xx
		chroot ${SHADOW} /usr/sbin/update-alternatives --set glx /usr/lib/nvidia
	    else
		echo -n "${BLUE} 340.xx ${NORMAL}"
		chroot ${SHADOW} /usr/sbin/update-alternatives --set glx /usr/lib/nvidia
		chroot ${SHADOW} /usr/sbin/update-alternatives --set nvidia /usr/lib/nvidia/current
	    fi
	    ;;
	"173")
	    echo -n "${BLUE} 173.xx ${NORMAL}"
	    echo -e '/usr/lib/i386-linux-gnu/nvidia/legacy-173xx/\n' > ${SHADOW}/etc/ld.so.conf.d/legacy-173xx.conf
	    chroot ${SHADOW} ldconfig
	    chroot ${SHADOW} /usr/sbin/update-alternatives --set nvidia /usr/lib/nvidia/legacy-173xx
	    chroot ${SHADOW} /usr/sbin/update-alternatives --set glx /usr/lib/nvidia
	    ;;
	"340")
	    echo -n "${BLUE} 340.xx ${NORMAL}"
	    chroot ${SHADOW} /usr/sbin/update-alternatives --set glx /usr/lib/nvidia
	    chroot ${SHADOW} /usr/sbin/update-alternatives --set nvidia /usr/lib/nvidia/current
	    ;;
    esac
    chroot ${SHADOW} modprobe nvidia
else
    echo "blacklist nvidia" >> ${SHADOW}/etc/modprobe.d/tcos-blacklist.conf
fi

# Check if VIA driver for VIA cards should be used.
#
if $via && $(lspci | grep -q -i 1106);then
    "${GREEN}Switching client to use chrome9 drivers.${NORMAL}"
    # write xorg.conf snippet
    echo -e 'Section "Device"\n\tIdentifier "My GPU"\n\tDriver "via"\nEndSection' > ${SHADOW}/etc/X11/xorg.conf.d/20-via.conf
    chroot ${SHADOW} modprobe via_chrome9
fi

#######################################################
# Try to automatically use swap devices.
# lsblk reads old MBR and new GPT tables

#if $autoswap ; then
#    lsblk -P -o NAME,FSTYPE 2> /dev/null | grep swap | while read line; do 
#	eval "$line" 
#	swapon /dev/${NAME} &> /dev/null
#	[ $? -eq 0 ] && echo -e "activate swap on ${NAME} \t ${GREEN}OK${NORMAL}"
#    done
#fi


############################################################
#
# convey important information to wheezy

[ -e /tmp/udhcpc_vars ] && cat /tmp/udhcpc_vars >> ${SHADOW}/etc/environment
[ -e /etc/resolv.conf ] && cp /etc/resolv.conf ${SHADOW}/etc/resolv.conf
[ -e /etc/hostname ] && cp /etc/hostname ${SHADOW}/etc/hostname

# export vars created by udhcp
. /tmp/udhcpc_vars_exporter 

######
# debug the initrd if needed
$debug && debugshell

# go ahead
exec switch_root ${SHADOW} /sbin/init "$@" </dev/console >/dev/console 2>&1

